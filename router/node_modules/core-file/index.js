/**
 * @date 10/02/2016
 * @author DangTM
 * @description manager file on server: upload, delete, view, list file, ....
 */
var formidable = require('formidable');
var dir = require('node-dir');
var mv = require('mv');
var path = require('path');
var fstream = require('fs');
var fs = require('fs-extra');
var media = require('../core-media');

var File = function(){
}
/**
 * upload file from client to server
 * @param req
 * @param res
 */
File.prototype.upload = function(req, res){
	  // create an incoming form object
	  var form = new formidable.IncomingForm();
	  var name = "";
	  // specify that we want to allow the user to upload multiple files in a single request
	  form.multiples = true;
	  // store all uploads in the /uploads directory
	  // form.uploadDir = path.join(__dirname, '/uploads');
	  // every time a file has been uploaded successfully,
	  // rename it to it's orignal name
	  form.on('file', function(field, file) {
		console.log('--> Save file:', file.name);
		name = file.name;
		var fileName = file.name.split('\\').pop().split('/').pop();
		var dir = file.name.replace(fileName, '');

//		form.uploadDir = path.join(__dirname, '/uploads');
//		fstream.rename(file.path, path.join(form.uploadDir, file.name));
		if (!fstream.existsSync(dir)){
		    fstream.mkdirSync(dir);
		}
	    //fstream.rename(file.path, file.name);
		mv(file.path, file.name, function(err) {
	  		// done. it tried fstream.rename first, and then falls back to 
	  		// piping the source file to the dest file and then unlinking 
	  		// the source file. 
			if(err){
				console.log('-->[ERROR] save file', fileName);
			}
			console.log('--> [SUCCESS] save file', fileName);
			var ext = fileName.split('/').pop().toLowerCase();
			if(ext.indexOf('.mp4') > 0 || ext.indexOf('.mp3') > 0 || ext.indexOf('.mkv') > 0){
				media.getInfoMedia(req, res, name);
				return;
			}
			
		});
	  });

	  // log any errors that occur
	  form.on('error', function(err) {
	    console.log('An error has occured: \n',err);
	  });

	  // once all the files have been uploaded, send a response to the client
	  form.on('end', function() {
	    res.end(JSON.stringify({success:1, message: 'upload successfully'}));  
	  });
	  // parse the incoming request containing the form data
	  form.parse(req);
}
/**
 * 
 * @param srcFile
 * @param desFile
 */
File.prototype.copy = function(srcFile, desFile){
	try {
	  fs.copySync(srcFile, desFile);
	  console.log("--> [SUCCESS]", srcFile + ' --> ' + desFile);
	} catch (err) {
	  console.error(err);
	  console.error("--> [ERROR]", srcFile + ' --> ' + desFile);
	}
}
/**
 * delete file with path full
 * @param path file delete
 */
File.prototype.remove = function(pathFile){
	console.log('--> [PREPARE] delete file ' + pathFile);
	var result = null;
	if (!fstream.existsSync(pathFile)){
		result = {success:0, error: 1, message: '[FAIL] File delete not found'};
	} else {
	    fstream.unlink(pathFile);
	    result = {success: 1, error: 0, message: '[SUCCESS] File delete success'};
	}
	return result;
}
/**
 * List all file directory-folder
 * @param pathDir
 */
File.prototype.getListFile = function(req, res){
	var pathFolder = req.query.path;
	var ip = req.headers['x-forwarded-for'] || 
		    req.connection.remoteAddress || 
		    req.socket.remoteAddress ||
		    req.connection.socket.remoteAddress;
	console.log('--> [IP Request]:', ip);
	if(fstream.existsSync(pathFolder)){
		dir.files(path.join(pathFolder,''), function(err, files) {
		    if (err) throw err;
		    console.info('--> Get all in %s', pathFolder);
		    res.setHeader('Content-type', 'application/json');
			res.charset = 'UTF-8';
		    res.send(files);
		});
	} else {
		res.setHeader('Content-type', 'application/json');
		res.charset = 'UTF-8';
		var obj = {error:'path not exist. please check again'};
	       res.send(obj);
	}
}
var file = new File();
module.exports = file;
